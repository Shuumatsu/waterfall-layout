import { Subject } from 'rxjs/Subject';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
// import 'rxjs/add/operator/map';
// import 'rxjs/add/operator/switchMap';
// import 'rxjs/add/operator/toPromise';
class Cache {
    constructor(num, option) {
        this.num = num;
        this.option = option;
    }
}
class Option {
}
function resizeHandler() {
    this.resizeSubject.next(document.body.clientWidth);
}
function debounce(fn, delay, immediate) {
    let timeout;
    return function () {
        let context = this, args = arguments;
        let later = () => {
            timeout = null;
            if (!immediate) {
                fn.apply(context, args);
            }
        };
        let callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, delay);
        if (callNow) {
            fn.apply(context, args);
        }
    };
}
Waterfall.prototype._positionItemsFactory = function () {
    Waterfall.prototype.positionItems = (() => {
        let round = this.cache.num;
        let cols = new Array(round);
        for (let i = 0; i < cols.length; i++) {
            cols[i] = [];
        }
        let tops = new Array(round);
        for (let i = 0; i < tops.length; i++) {
            tops[i] = 0;
        }
        return (items) => {
            items.forEach(v => {
                let i = tops.indexOf(Math.min.apply(null, tops));
                v.style.left = `calc((${this.width} + ${this.cache.option.gap}) * ${i})`;
                v.style.top = tops[i] + 'px';
                cols[i].push(v);
                tops[i] += parseFloat(window.getComputedStyle(v).getPropertyValue('height')) + parseFloat(window.getComputedStyle(v).getPropertyValue('margin-bottom'));
                this.maxHeightSubject.next(Math.max.apply(null, tops));
            });
        };
    })();
};
Waterfall.prototype.calcColNum = function () {
    if (!this.cache.option.breakPoints) {
        return;
    }
    let clientWidth = document.body.clientWidth;
    let num = this.cache.option.breakPoints.length;
    this.cache.option.breakPoints.find((v, i) => {
        if (clientWidth < v) {
            num = v + 1;
            return true;
        }
    });
    this.cache.num = num;
    this.numChangeSubject.next(num);
};
Waterfall.prototype.calcItemsWidth = function () {
    if (!this.cache.option.gap) {
        this.width = `calc(100% / ${this.cache.num})`;
        return;
    }
    this.width = `calc((100% - ${this.cache.num - 1} * ${this.cache.option.gap}) / ${this.cache.num})`;
};
Waterfall.prototype.setItemsWidth = function () {
    if (!this.style) {
        this.styleItem();
    }
    this.style.innerHTML += `
    .waterfall-item {
        width: ${this.width};
    }`;
};
Waterfall.prototype.styleItems = function () {
    let style = document.createElement('style');
    style.id = 'waterfall-item-style';
    style.innerHTML = `.waterfall-item {
        position: absolute;
        transition: top 0.25s 0.125s, left 0.25s 0.125s;
    }`;
    this.style = style;
    this.container.appendChild(style);
};
Waterfall.prototype.addItems = function (items) {
    if (!Array.isArray(items)) {
        items = [items];
    }
    this.newItemsSubject.next(items);
};
export function Waterfall(container) {
    this.container = container;
    let option = JSON.parse(container.getAttribute('data-option'));
    if (!option) {
        return;
    }
    if (!this.container.style.position || this.container.style.position === 'static') {
        this.container.style.position = 'relative';
    }
    this.styleItems();
    option.breakPoints = option.breakPoints || option.breakPoints.sort();
    if (typeof option.gap === 'number') {
        option.gap += 'px';
    }
    option.gap = option.gap || 0;
    this.cache = new Cache(1, option);
    this.items = Array.from(this.container.querySelectorAll('.waterfall-item'));
    this.resizeSubject = new Subject();
    this.numChangeSubject = new Subject();
    this.maxHeightSubject = new Subject();
    this.newItemsSubject = new Subject();
    this.numChangeSubject.distinctUntilChanged().subscribe(next => {
        this.calcItemsWidth();
        this.setItemsWidth();
        this._positionItemsFactory();
        this.positionItems(this.items);
    });
    this.maxHeightSubject.debounceTime(300).distinctUntilChanged().subscribe(next => {
        this.container.style.height = next + 'px';
    });
    this.newItemsSubject.subscribe(next => {
        this.container.appendChild(next);
        this.items.concat(next);
        this.positionItems(next);
    });
    this.resizeSubject.distinctUntilChanged().subscribe(next => {
        this.items.concat(next);
        this.calcColNum(next);
    });
    document.addEventListener('resize', debounce(resizeHandler.bind(this), 300));
    this.resizeSubject.next();
}

//# sourceMappingURL=data:application/json;base64,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LElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUNKLENBQUM7SUFFRixJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixFQUFFLENBQUMsU0FBUyxDQUMvQyxJQUFJO1FBQ0EsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQ0osQ0FBQztJQUVGLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3RSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlCLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcblxuLy8gaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9jYXRjaCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2RlYm91bmNlVGltZSc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2Rpc3RpbmN0VW50aWxDaGFuZ2VkJztcbi8vIGltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcbi8vIGltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3Ivc3dpdGNoTWFwJztcbi8vIGltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvdG9Qcm9taXNlJztcblxuY2xhc3MgQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBudW06IG51bWJlciwgcHVibGljIG9wdGlvbjogT3B0aW9uKSB7IH1cbn1cblxuY2xhc3MgT3B0aW9uIHtcbiAgICBicmVha1BvaW50czogbnVtYmVyW107XG4gICAgZ2FwOiBudW1iZXIgfCBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgdGhpcy5yZXNpemVTdWJqZWN0Lm5leHQoZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCk7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuOiBGdW5jdGlvbiwgZGVsYXk6IG51bWJlciwgaW1tZWRpYXRlPzogYm9vbGVhbikge1xuICAgIGxldCB0aW1lb3V0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsZXQgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIGRlbGF5KTtcbiAgICAgICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5XYXRlcmZhbGwucHJvdG90eXBlLl9wb3NpdGlvbkl0ZW1zRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICBXYXRlcmZhbGwucHJvdG90eXBlLnBvc2l0aW9uSXRlbXMgPSAoKCkgPT4ge1xuICAgICAgICBsZXQgcm91bmQgPSB0aGlzLmNhY2hlLm51bTtcbiAgICAgICAgbGV0IGNvbHM6IEVsZW1lbnRbXVtdID0gbmV3IEFycmF5KHJvdW5kKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb2xzW2ldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvcHM6IG51bWJlcltdID0gbmV3IEFycmF5KHJvdW5kKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b3BzW2ldID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoaXRlbXM6IEhUTUxFbGVtZW50W10pID0+IHtcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGk6IG51bWJlciA9IHRvcHMuaW5kZXhPZihNYXRoLm1pbi5hcHBseShudWxsLCB0b3BzKSk7XG5cbiAgICAgICAgICAgICAgICB2LnN0eWxlLmxlZnQgPSBgY2FsYygoJHt0aGlzLndpZHRofSArICR7dGhpcy5jYWNoZS5vcHRpb24uZ2FwfSkgKiAke2l9KWA7XG4gICAgICAgICAgICAgICAgdi5zdHlsZS50b3AgPSB0b3BzW2ldICsgJ3B4JztcbiAgICAgICAgICAgICAgICBjb2xzW2ldLnB1c2godik7XG4gICAgICAgICAgICAgICAgdG9wc1tpXSArPSBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHYpLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUodikuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMubWF4SGVpZ2h0U3ViamVjdC5uZXh0KDxudW1iZXI+TWF0aC5tYXguYXBwbHkobnVsbCwgdG9wcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KSgpO1xufVxuXG5XYXRlcmZhbGwucHJvdG90eXBlLmNhbGNDb2xOdW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmNhY2hlLm9wdGlvbi5icmVha1BvaW50cykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNsaWVudFdpZHRoID0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcbiAgICBsZXQgbnVtID0gdGhpcy5jYWNoZS5vcHRpb24uYnJlYWtQb2ludHMubGVuZ3RoO1xuXG4gICAgdGhpcy5jYWNoZS5vcHRpb24uYnJlYWtQb2ludHMuZmluZCgodiwgaSkgPT4ge1xuICAgICAgICBpZiAoY2xpZW50V2lkdGggPCB2KSB7XG4gICAgICAgICAgICBudW0gPSB2ICsgMTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmNhY2hlLm51bSA9IG51bTtcbiAgICB0aGlzLm51bUNoYW5nZVN1YmplY3QubmV4dChudW0pO1xufTtcblxuV2F0ZXJmYWxsLnByb3RvdHlwZS5jYWxjSXRlbXNXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuY2FjaGUub3B0aW9uLmdhcCkge1xuICAgICAgICB0aGlzLndpZHRoID0gYGNhbGMoMTAwJSAvICR7dGhpcy5jYWNoZS5udW19KWA7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLndpZHRoID0gYGNhbGMoKDEwMCUgLSAke3RoaXMuY2FjaGUubnVtIC0gMX0gKiAke3RoaXMuY2FjaGUub3B0aW9uLmdhcH0pIC8gJHt0aGlzLmNhY2hlLm51bX0pYDtcbn07XG5cbldhdGVyZmFsbC5wcm90b3R5cGUuc2V0SXRlbXNXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuc3R5bGUpIHtcbiAgICAgICAgdGhpcy5zdHlsZUl0ZW0oKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlLmlubmVySFRNTCArPSBgXG4gICAgLndhdGVyZmFsbC1pdGVtIHtcbiAgICAgICAgd2lkdGg6ICR7dGhpcy53aWR0aH07XG4gICAgfWBcbn07XG5cbldhdGVyZmFsbC5wcm90b3R5cGUuc3R5bGVJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlLmlkID0gJ3dhdGVyZmFsbC1pdGVtLXN0eWxlJztcbiAgICBzdHlsZS5pbm5lckhUTUwgPSBgLndhdGVyZmFsbC1pdGVtIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0cmFuc2l0aW9uOiB0b3AgMC4yNXMgMC4xMjVzLCBsZWZ0IDAuMjVzIDAuMTI1cztcbiAgICB9YFxuXG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHN0eWxlKTtcbn07XG5cbldhdGVyZmFsbC5wcm90b3R5cGUuYWRkSXRlbXMgPSBmdW5jdGlvbiAoaXRlbXM6IEhUTUxFbGVtZW50IHwgSFRNTEVsZW1lbnRbXSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgICAgaXRlbXMgPSBbaXRlbXNdO1xuICAgIH1cbiAgICB0aGlzLm5ld0l0ZW1zU3ViamVjdC5uZXh0KGl0ZW1zKTtcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBXYXRlcmZhbGwoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIGxldCBvcHRpb24gPSBKU09OLnBhcnNlKGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW9uJykpO1xuICAgIGlmICghb3B0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uIHx8IHRoaXMuY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuICAgIHRoaXMuc3R5bGVJdGVtcygpO1xuXG4gICAgb3B0aW9uLmJyZWFrUG9pbnRzID0gb3B0aW9uLmJyZWFrUG9pbnRzIHx8IG9wdGlvbi5icmVha1BvaW50cy5zb3J0KCk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb24uZ2FwID09PSAnbnVtYmVyJykge1xuICAgICAgICBvcHRpb24uZ2FwICs9ICdweCc7XG4gICAgfVxuICAgIG9wdGlvbi5nYXAgPSBvcHRpb24uZ2FwIHx8IDA7XG4gICAgdGhpcy5jYWNoZSA9IG5ldyBDYWNoZSgxLCBvcHRpb24pO1xuXG4gICAgdGhpcy5pdGVtcyA9IDxIVE1MRWxlbWVudFtdPkFycmF5LmZyb20odGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLndhdGVyZmFsbC1pdGVtJykpO1xuXG4gICAgdGhpcy5yZXNpemVTdWJqZWN0ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgICB0aGlzLm51bUNoYW5nZVN1YmplY3QgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHRoaXMubWF4SGVpZ2h0U3ViamVjdCA9IG5ldyBTdWJqZWN0PG51bWJlcj4oKTtcbiAgICB0aGlzLm5ld0l0ZW1zU3ViamVjdCA9IG5ldyBTdWJqZWN0PEhUTUxFbGVtZW50W10+KCk7XG5cbiAgICB0aGlzLm51bUNoYW5nZVN1YmplY3QuZGlzdGluY3RVbnRpbENoYW5nZWQoKS5zdWJzY3JpYmUoXG4gICAgICAgIG5leHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWxjSXRlbXNXaWR0aCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRJdGVtc1dpZHRoKCk7XG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkl0ZW1zRmFjdG9yeSgpO1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkl0ZW1zKHRoaXMuaXRlbXMpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMubWF4SGVpZ2h0U3ViamVjdC5kZWJvdW5jZVRpbWUoMzAwKS5kaXN0aW5jdFVudGlsQ2hhbmdlZCgpLnN1YnNjcmliZShcbiAgICAgICAgbmV4dCA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBuZXh0ICsgJ3B4JztcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLm5ld0l0ZW1zU3ViamVjdC5zdWJzY3JpYmUoXG4gICAgICAgIG5leHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQobmV4dCk7XG4gICAgICAgICAgICB0aGlzLml0ZW1zLmNvbmNhdChuZXh0KTtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25JdGVtcyhuZXh0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLnJlc2l6ZVN1YmplY3QuZGlzdGluY3RVbnRpbENoYW5nZWQoKS5zdWJzY3JpYmUoXG4gICAgICAgIG5leHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5jb25jYXQobmV4dCk7XG4gICAgICAgICAgICB0aGlzLmNhbGNDb2xOdW0obmV4dCk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2UocmVzaXplSGFuZGxlci5iaW5kKHRoaXMpLCAzMDApKTtcbiAgICB0aGlzLnJlc2l6ZVN1YmplY3QubmV4dCgpO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
